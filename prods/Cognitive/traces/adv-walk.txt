[] : (walk2 west) : ()
-- [] : (apply (lambda (dir) ({list} 'walk ({list} 'quote dir))) (cdr {defmac}-10)) : (({defmac}-10 #<macro> west))
-- -- [] : (lambda (dir) ({list} 'walk ({list} 'quote dir))) : (({defmac}-10 #<macro> west))
-- [] : ({list} 'walk ({list} 'quote dir)) : ((dir . west))
-- -- [] : 'walk : ((dir . west))
-- -- [] : ({list} 'quote dir) : ((dir . west))
-- -- -- [] : 'quote : ((dir . west))
[] : (walk 'west) : ()
-- [] : 'west : ()
-- [walk] : (define (correct-way edge) (eq? (cadr edge) direction)) : ((direction . west))
[walk] : (if-let1 next (find correct-way (cdr (assoc *location* *edges*))) (begin (set! *location* (car next)) (look)) '(you cannot go that way.)) : ((direction . west) (correct-way . correct-way))
-- [] : (apply (lambda (var expr then else) ({list} 'let ({list} ({list} var expr)) ({list} 'if var then else))) (cdr {defmac}-9)) : (({defmac}-9 #<macro> next (find correct-way (cdr (assoc *location* *edges*))) (begin (set! *location* (car next)) (look)) '(you cannot go that way.)))
-- -- [] : (lambda (var expr then else) ({list} 'let ({list} ({list} var expr)) ({list} 'if var then else))) : (({defmac}-9 #<macro> next (find correct-way (cdr (assoc *location* *edges*))) (begin (set! *location* (car next)) (look)) '(you cannot go that way.)))
-- [] : ({list} 'let ({list} ({list} var expr)) ({list} 'if var then else)) : ((var . next) (expr find correct-way (cdr (assoc *location* *edges*))) (then begin (set! *location* (car next)) (look)) (else quote (you cannot go that way.)))
-- -- [] : 'let : ((var . next) (expr find correct-way (cdr (assoc *location* *edges*))) (then begin (set! *location* (car next)) (look)) (else quote (you cannot go that way.)))
-- -- [] : ({list} ({list} var expr)) : ((var . next) (expr find correct-way (cdr (assoc *location* *edges*))) (then begin (set! *location* (car next)) (look)) (else quote (you cannot go that way.)))
-- -- -- [] : ({list} var expr) : ((var . next) (expr find correct-way (cdr (assoc *location* *edges*))) (then begin (set! *location* (car next)) (look)) (else quote (you cannot go that way.)))
-- -- [] : ({list} 'if var then else) : ((var . next) (expr find correct-way (cdr (assoc *location* *edges*))) (then begin (set! *location* (car next)) (look)) (else quote (you cannot go that way.)))
-- -- -- [] : 'if : ((var . next) (expr find correct-way (cdr (assoc *location* *edges*))) (then begin (set! *location* (car next)) (look)) (else quote (you cannot go that way.)))
[walk] : (let ((next (find correct-way (cdr (assoc *location* *edges*))))) (if next (begin (set! *location* (car next)) (look)) '(you cannot go that way.))) : ((direction . west) (correct-way . correct-way))
-- [find] : (let ((r (remove-if-not expr lst))) (if (eq? r '()) #f (car r))) : ((expr . correct-way) (lst (garden west door) (attic upstairs ladder)))
-- -- [remove-if-not] : (map (lambda (x) (if (not (func x)) (values) x)) lst) : ((lst (garden west door) (attic upstairs ladder)) (func . correct-way))
-- -- -- [remove-if-not] : (lambda (x) (if (not (func x)) (values) x)) : ((lst (garden west door) (attic upstairs ladder)) (func . correct-way))
-- -- -- [] : (if (not (func x)) (values) x) : ((x garden west door))
-- -- -- -- -- [correct-way] : (eq? (cadr edge) direction) : ((edge garden west door))
-- -- -- [] : (if (not (func x)) (values) x) : ((x attic upstairs ladder))
-- -- -- -- -- [correct-way] : (eq? (cadr edge) direction) : ((edge attic upstairs ladder))
-- -- -- [] : (values) : ((x attic upstairs ladder))
-- [] : (if (eq? r '()) #f (car r)) : ((r (garden west door)))
-- -- [] : (eq? r '()) : ((r (garden west door)))
-- [] : (car r) : ((r (garden west door)))
[] : (if next (begin (set! *location* (car next)) (look)) '(you cannot go that way.)) : ((next garden west door))
-- [] : next : ((next garden west door))
[] : (begin (set! *location* (car next)) (look)) : ((next garden west door))
[] : ((set! *location* (car next)) (look)) : ((next garden west door))
-- [] : (set! *location* (car next)) : ((next garden west door))
-- -- [] : (car next) : ((next garden west door))
[] : (look) : ((next garden west door))
[look] : ((append (describe-location *location* *nodes*) (describe-paths *location* *edges*) (describe-objects *location* *objects* *object-locations*))) : ()
[look] : (append (describe-location *location* *nodes*) (describe-paths *location* *edges*) (describe-objects *location* *objects* *object-locations*)) : ()
-- [describe-location] : (cadr (assoc location nodes)) : ((nodes (living-room (you are in the living-room. a wizard is snoring loudly on the couch.)) (garden (you are in a beautiful garden. there is a well in front of you.)) (attic (you are in the attic. there is a giant welding torch in the corner.))) (location . garden))
-- [describe-paths] : (apply append (map describe-path (cdr (assoc location edges)))) : ((edges (living-room (garden west door) (attic upstairs ladder)) (garden (living-room east door)) (attic (living-room downstairs ladder))) (location . garden))
-- -- -- [describe-path] : ({list} 'there 'is 'a (caddr edge) 'going (cadr edge) 'from 'here.) : ((edge living-room east door))
-- -- -- -- [describe-path] : 'there : ((edge living-room east door))
-- -- -- -- [describe-path] : 'is : ((edge living-room east door))
-- -- -- -- [describe-path] : 'a : ((edge living-room east door))
-- -- -- -- [describe-path] : 'going : ((edge living-room east door))
-- -- -- -- [describe-path] : 'from : ((edge living-room east door))
-- -- -- -- [describe-path] : 'here. : ((edge living-room east door))
-- -- [describe-objects] : (define (describe-obj obj) ({list} 'you 'see 'a obj 'on 'the 'floor.)) : ((loc . garden) (objs whiskey bucket frog chain) (obj-loc (whiskey living-room) (bucket living-room) (chain garden) (frog garden)))
-- [describe-objects] : (apply append (map describe-obj (objects-at loc objs obj-loc))) : ((loc . garden) (objs whiskey bucket frog chain) (obj-loc (whiskey living-room) (bucket living-room) (chain garden) (frog garden)) (describe-obj . describe-obj))
-- -- -- -- [objects-at] : (define (is-at obj) (eq? (cadr (assoc obj obj-loc)) loc)) : ((loc . garden) (objs whiskey bucket frog chain) (obj-loc (whiskey living-room) (bucket living-room) (chain garden) (frog garden)))
-- -- -- [objects-at] : (remove-if-not is-at objs) : ((loc . garden) (objs whiskey bucket frog chain) (obj-loc (whiskey living-room) (bucket living-room) (chain garden) (frog garden)) (is-at . is-at))
-- -- -- [remove-if-not] : (map (lambda (x) (if (not (func x)) (values) x)) lst) : ((lst whiskey bucket frog chain) (func . is-at))
-- -- -- -- [remove-if-not] : (lambda (x) (if (not (func x)) (values) x)) : ((lst whiskey bucket frog chain) (func . is-at))
-- -- -- -- [] : (if (not (func x)) (values) x) : ((x . whiskey))
-- -- -- -- -- -- [is-at] : (eq? (cadr (assoc obj obj-loc)) loc) : ((obj . whiskey))
-- -- -- -- [] : (values) : ((x . whiskey))
-- -- -- -- [] : (if (not (func x)) (values) x) : ((x . bucket))
-- -- -- -- -- -- [is-at] : (eq? (cadr (assoc obj obj-loc)) loc) : ((obj . bucket))
-- -- -- -- [] : (values) : ((x . bucket))
-- -- -- -- [] : (if (not (func x)) (values) x) : ((x . frog))
-- -- -- -- -- -- [is-at] : (eq? (cadr (assoc obj obj-loc)) loc) : ((obj . frog))
-- -- -- -- [] : (if (not (func x)) (values) x) : ((x . chain))
-- -- -- -- -- -- [is-at] : (eq? (cadr (assoc obj obj-loc)) loc) : ((obj . chain))
-- -- -- [] : ({list} 'you 'see 'a obj 'on 'the 'floor.) : ((obj . frog))
-- -- -- -- [] : 'you : ((obj . frog))
-- -- -- -- [] : 'see : ((obj . frog))
-- -- -- -- [] : 'a : ((obj . frog))
-- -- -- -- [] : 'on : ((obj . frog))
-- -- -- -- [] : 'the : ((obj . frog))
-- -- -- -- [] : 'floor. : ((obj . frog))
-- -- -- [] : ({list} 'you 'see 'a obj 'on 'the 'floor.) : ((obj . chain))
-- -- -- -- [] : 'you : ((obj . chain))
-- -- -- -- [] : 'see : ((obj . chain))
-- -- -- -- [] : 'a : ((obj . chain))
-- -- -- -- [] : 'on : ((obj . chain))
-- -- -- -- [] : 'the : ((obj . chain))
-- -- -- -- [] : 'floor. : ((obj . chain))
